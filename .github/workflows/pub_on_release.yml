name: Release
on:
 release:
   types: [published]

jobs:
  run_tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py') -d C,W,R
        

  build_and_pub:
    needs: [ run_tests ]
    runs-on: ubuntu-latest
    env:
      LOGIN: ${{ secrets.DOCKER_LOGIN }}
      REPO: ${{ secrets.DOCKER_NAME }}

    steps:
      - name: Login to docker.io
        run: echo ${{ secrets.DOCKER_PWD }} | docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin
      - uses: actions/checkout@master
      - name: Build image
        run: docker build -t $REPO:${GITHUB_REF:11} -f Dockerfile .
      - name: Push image to docker.io
        run: docker push $REPO:${GITHUB_REF:11}


  deploy:
    needs: [ build_and_pub ]
    runs-on: ubuntu-latest
    steps:
      - name: Set tag to env
        run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF:11})
      - name: Send webhook for deploy
        run: "curl --silent --show-error --fail -X POST ${{ secrets.DEPLOYMENT_SERVER }} -H 'Authorization: ${{ secrets.CI_TOKEN }}' -H 'Content-Type: application/json' -d '{\"owner\": \"${{ secrets.DOCKER_LOGIN }}\", \"repository\": \"${{ secrets.DOCKER_NAME }}\", \"tag\": \"${{ env.RELEASE_VERSION }}\", \"ports\": {\"8080\": 8080}}'"